# Линейные дифференциальные уравнения 2 порядка
# Условно полноценных блока будет 2
# (1) в первой части импортирование необходимых модулей, задание коэффициентов, правой части и начальных условий
# (2) во второй части реализовано решение уравнения, построение графика решения и вызов


# Часть 1

import numpy as np
import matplotlib.pyplot as plt

# уравнение вида a*y''+b*y'+c*y=f(x)

# реализован метод Эйлера

# задаются:
# шаг сетки h,
# начальное значение x0 (отсюда начинает строиться функция),
# конечное значение xn (здесь заканчивается построение функции),
# начальные условия y(x0) = y0 и y'(x0) = dy0 (чему равна функция и ее производная в начальной точке)
# коэффициенты при функции и её производных a,b,c
# функция, описывающая правую часть f(x)

# x0, xn, y(x0)=y0, y'(x0)=(y1-y0)/h, h

# по условию задачи
h = 1e-3
x0 = 0
y0 = 0
dy0 = 1

a = 1
b = 0
c = 1

# конечная точка построения решения
xn = np.pi*7


# функция, задающая правую часть
def f(x):
    return 0


# отдельно сконструирована функция для нахождения второго значения искомой функции, это необходимо для
# нахождения следующих значений решения
def y1(dy0, y0, h):
    return dy0 * h + y0

# Часть 2

# функция для нахождения решения с помощью заданных в 1 части значений
def substraction2(a, b, c, x0, xn, y0, y1, h):
    # создание массивов для построения решения
    xi = []
    yi = []
    # инициализация значений, необходимых для вычисления следующих значений решения
    xk = x0
    yk_1 = y0
    yk = y1
    # занесение в массивы первых значений, так как они заранее известны
    xi.append(xk)
    yi.append(yk_1)

    while xk <= xn:
        # продвижение по сетке
        xk = xk + h
        # вычисление функции правой части от текущего значения xk
        fx = f(xk)
        # вычисление следующего значения функции решения y(k+1)
        yt = (h**2 / a) * fx + (2 - ((b * h) / a) - ((c * (h ** 2)) / a)) * yk + (((b*h)/a)-1) * yk_1
        # занесение в массивы текущих значений аргумента и решения
        xi.append(xk)
        yi.append(yk)
        # переприсваивание текущих значений, они заменяются новыми : y(k-1) теперь должен равняться y(k), а y(k) - y(k+1)
        yk_1 = yk
        yk = yt
    return xi,yi

# отрисовка графиков
def plotnik(args,f_args):
    plt.grid(True)
    plt.plot(args, f_args)
    plt.show()

# вызов функций решения и построения графиков
print(substraction2(a,b,c,x0,xn,y0,y1(dy0,y0,h),h)[0])
print(substraction2(a,b,c,x0,xn,y0,y1(dy0,y0,h),h)[1])
plotnik(substraction2(a,b,c,x0,xn,y0,y1(dy0,y0,h),h)[0],substraction2(a,b,c,x0,xn,y0,y1(dy0,y0,h),h)[1])